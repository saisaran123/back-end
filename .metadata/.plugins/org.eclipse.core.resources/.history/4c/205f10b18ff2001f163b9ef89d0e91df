
const workout_wrap = _(".workout-wrap-1");
const BODY = _(".workout-wrap-2");
const FRONT = _(".front-body");
const BACK = _(".back-body");
const TAKE_REST=_(".take-rest-btn");
const WORKOUT_COMPLETED=_(".workout-completed-btn");




workout_wrap.addEventListener("click", (ev) => {
    let prev = _(".expand-box");
    if (ev.target.closest("div").classList.contains("expand-btn")) {
        ev.target.closest(".up-down").classList.toggle("max-width");
        ev.target.closest(".up-down").classList.toggle("expand-box");
        if (prev) {
            prev.classList.remove("max-width");
            prev.classList.remove("expand-box");
        }
        let childs = workout_wrap.children;
        let all = [];
        for (const child of childs) {
            let paraDiv = child.querySelector(".pprr");
            let contentDiv = child.querySelector(".ccnn");
            if (!child.classList.contains("expand-box")) {
                paraDiv.classList.remove("display_none");
                contentDiv.classList.add("display_none");
                all.push(child);

            }
            else {
                paraDiv.classList.add("display_none");
                contentDiv.classList.remove("display_none");
            }
        }
        if (all.length == 3) {
            for (const child of all) {
                let paraDiv = child.querySelector(".pprr");
                let contentDiv = child.querySelector(".ccnn");
                paraDiv.classList.add("display_none");
                contentDiv.classList.remove("display_none");
            }
        }
        else{
            all.length = 0;
        }
    }
    
})
BODY.addEventListener("click", (ev) => {
    if (!ev.target.closest("path")) {
        FRONT.classList.toggle("hide-body");
        BACK.classList.toggle("hide-body");
    }
})

const exercises = [
    {
        id: 1,
        name: "Push-ups",
        video: "/kunto/videos/Arms backward extension back stretch.mp4",
        description: "Classic upper body exercise",
        thumbnail: "https://images.unsplash.com/photo-1598971639058-fab3c3109a00?w=300&h=200&fit=crop"
    },
    {
        id: 2,
        name: "Squats",
        video: "/kunto/videos/Back and shoulders stretch.mp4",
        description: "Fundamental lower body movement",
        thumbnail: "https://images.unsplash.com/photo-1534367610401-9f5ed68180aa?w=300&h=200&fit=crop"
    },	
    {
        id: 3,
        name: "Plank",
        video: "/kunto/videos/Band Pushdown Both Arms.mp4",
        description: "Core stability exercise",
        thumbnail: "https://images.unsplash.com/photo-1566241142559-40a9552f2ff2?w=300&h=200&fit=crop"
    },
        {
        id: 4,
        name: "Push-ups",
        video: "/kunto/videos/Band Skullcrusher.mp4",
        description: "Classic upper body exercise",
        thumbnail: "https://images.unsplash.com/photo-1598971639058-fab3c3109a00?w=300&h=200&fit=crop"
    },
    {
        id: 5,
        name: "Squats",
        video: "/kunto/videos/Dip Leg Raise on couch.mp4",
        description: "Fundamental lower body movement",
        thumbnail: "https://images.unsplash.com/photo-1534367610401-9f5ed68180aa?w=300&h=200&fit=crop"
    },
        {
        id: 6,
        name: "Push-ups",
        video: "/kunto/videos/Dumbbell One Arm Reverse Wrist Curl.mp4",
        description: "Classic upper body exercise",
        thumbnail: "https://images.unsplash.com/photo-1598971639058-fab3c3109a00?w=300&h=200&fit=crop"
    },
    {
        id: 7,
        name: "Squats",
        video: "/kunto/videos/Dumbbell Russian Twist with Legs Floor Off.mp4",
        description: "Fundamental lower body movement",
        thumbnail: "https://images.unsplash.com/photo-1534367610401-9f5ed68180aa?w=300&h=200&fit=crop"
    },
        {
        id: 8,
        name: "Push-ups",
        video: "/kunto/videos/Resistance Band Glute Bridge Abduction.mp4",
        description: "Classic upper body exercise",
        thumbnail: "https://images.unsplash.com/photo-1598971639058-fab3c3109a00?w=300&h=200&fit=crop"
    },
    {
        id: 9,
        name: "Squats",
        video: "/kunto/videos/Resistance Band Side Plank Glute Raise.mp4",
        description: "Fundamental lower body movement",
        thumbnail: "https://images.unsplash.com/photo-1534367610401-9f5ed68180aa?w=300&h=200&fit=crop"
    }
    ,
        {
        id: 10,
        name: "Push-ups",
        video: "/kunto/videos/Side to side push up.mp4",
        description: "Classic upper body exercise",
        thumbnail: "https://images.unsplash.com/photo-1598971639058-fab3c3109a00?w=300&h=200&fit=crop"
    }
    
];
let mv_exercises = [
    
]

let mv_currentExcerciseIndex = 0;

let currentExerciseIndex = 0;

// Tab Navigation
const navButtons = document.querySelectorAll('.wo-nav-button');
const tabContents = document.querySelectorAll('.wo-tab-content');

navButtons.forEach(button => {
    button.addEventListener('click', () => {
        navButtons.forEach(btn => btn.classList.remove('wo-active'));
        tabContents.forEach(content => content.classList.remove('wo-active'));

        button.classList.add('wo-active');
        const tabId = button.getAttribute('data-tab');
        document.getElementById(`${tabId}-content`).classList.add('wo-active');
    });
});

// Exercise Navigation
function updateExerciseDisplay(parent,suggestedVideos) {
	console.log(parent);
    const video = document.getElementById(`${parent}exercise-video`);
	let exercise;
	if(parent=="mv-"){
		exercise = suggestedVideos[mv_currentExcerciseIndex];
	}
	else{
    	exercise = suggestedVideos[currentExerciseIndex ];
	}	
    // Set video source and reload
    video.setAttribute("src", exercise.video);
    video.load();
	if(parent=="mv-"){
		document.getElementById(`${parent}current-exercise-name`).textContent = suggestedVideos[mv_currentExcerciseIndex ].name;
		    document.getElementById(`${parent}current-exercise-description`).textContent = suggestedVideos[mv_currentExcerciseIndex].description;	
		}
	else{
    document.getElementById(`${parent}current-exercise-name`).textContent = suggestedVideos[currentExerciseIndex].name;
    document.getElementById(`${parent}current-exercise-description`).textContent = suggestedVideos[currentExerciseIndex].description;
	}
    
    const previewContainer = document.querySelector(`.${parent}wo-preview-container`);
    previewContainer.innerHTML = '';
    console.log(parent);
    suggestedVideos.forEach((exercise, index) => {
		let isNext;
		if(parent=="mv-"){
			isNext = (index === ( mv_currentExcerciseIndex + 1 ) % suggestedVideos.length);
		}
        else{
			isNext = (index === ( currentExerciseIndex + 1 ) % suggestedVideos.length);
		}
		console.log(exercise.name);
        const previewCard = document.createElement('div');
        previewCard.className = `wo-preview ${isNext ? 'next' : ''}`;
        previewCard.innerHTML = `
            <div class="wo-thumbnail-wrapper">
                <img src="${exercise.thumbnail}" alt="${exercise.name}" class="wo-thumbnail">
                <div class="wo-overlay">
                    <p class="wo-name">${exercise.name}</p>
                </div>
            </div>
			<p class="wo-description ${parent}close" onclick="deleteManual(this, '${exercise.name}')"></p>

        `;
        
        // Add click handler to preview cards
        
        
        previewContainer.appendChild(previewCard);
    });
}

function deleteManual(element, exerciseName) {
	console.log("heheheh");
    // Find the index of the exercise in the mv_exercises array
    const indexToRemove = mv_exercises.findIndex(ex => ex.name === exerciseName);
    
    if (indexToRemove !== -1) {
        // Remove the exercise from the array
        mv_exercises.splice(indexToRemove, 1);
        
        // Remove the element from the DOM
        element.closest('.wo-preview').remove();
        
        // Optional: Re-render the exercise display
        updateExerciseDisplay("mv-", mv_exercises);
    }
}


function mv_render(){
	_(".mv-upcoming-exercises").classList.remove("dis_none");
	_(".mv-video-container").classList.remove("dis_none");
	_(".mv-exercise-info").style.display ="flex";
	_(".mv-start-workout-btn").classList.remove("dis_none");
	_(".no-video-found").classList.add("dis_none");
	mv_exercises = transformExercises(selectedVideos);
	updateExerciseDisplay("mv-",mv_exercises);
}
function transformExercises(selectedVideos) {
    return selectedVideos.map((name, index) => ({
        id: index + 1,
        name: name,
        video: `/kunto/videos/${name.replace(/\s+/g, '_')}.mp4`, // Generates a dynamic video path
        description: `Targets Chest`, // You can modify this dynamically if needed
        thumbnail: `https://images.unsplash.com/photo-1598971639058-fab3c3109a00?w=300&h=200&fit=crop` // Change dynamically if needed
    }));
}


// Initialize display
updateExerciseDisplay("",exercises);



function takeRest(but){
	DURATION=30;
	let REST_WINDOW= but.closest(".wo-tab-content").querySelector('.rest-video');
	REST_WINDOW.classList.toggle("active-rest-video");
	startTimer(REST_WINDOW);
}
const DEFAULT_COLORS = ['#54DCA0', '#FFC043', '#FF6937'];
let DURATION = 30; // seconds

function hexToRgb(hex) {
  hex = hex.replace('#', '');
  const bigInt = parseInt(hex, 16);
  const r = (bigInt >> 16) & 255;
  const g = (bigInt >> 8) & 255;
  const b = bigInt & 255;
  return [r, g, b];
}

function rgbToHex(rgb) {
  const r = rgb[0].toString(16).padStart(2, '0');
  const g = rgb[1].toString(16).padStart(2, '0');
  const b = rgb[2].toString(16).padStart(2, '0');
  return `#${r}${g}${b}`;
}

function interpolateColor(color1, color2, factor = 0.5) {
  const result = color1.slice();
  for (let i = 0; i < 3; i++) {
    result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));
  }
  return result;
}

function getIntermediateColor(colors, percentage) {
  if (percentage <= 0) return colors[0];
  if (percentage >= 100) return colors[colors.length - 1];

  const scaledPercentage = (percentage / 100) * (colors.length - 1);
  const lowerIndex = Math.floor(scaledPercentage);
  const upperIndex = lowerIndex + 1;
  const factor = scaledPercentage - lowerIndex;

  const color1 = hexToRgb(colors[lowerIndex]);
  const color2 = hexToRgb(colors[upperIndex]);
  const interpolatedColor = interpolateColor(color1, color2, factor);

  return rgbToHex(interpolatedColor);
}

function createCircle(color, value = 100) {
  const px = (300 * value) / 100;
  return `
    <svg class="circle" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
      <circle
        style="transform: rotateX(180deg) rotate(90deg); transform-origin: 50% 50%;"
        r="46"
        cx="50"
        cy="50"
        stroke="${color}"
        stroke-width="4"
        stroke-linecap="round"
        stroke-dashoffset="${px}px"
        fill="transparent"
        stroke-dasharray="300px"
      ></circle>
    </svg>
  `;
}

let startTime;
let animationFrameId;
let lastTimeLeft = null;

function updateTimer(REST_WINDOW) {
  if (!startTime) return;

  const seconds = Math.min((Date.now() - startTime) / 1000, DURATION);
  const percentage = Math.min((seconds * 100) / DURATION, 100);
  const timeLeft = Math.ceil(DURATION - seconds);
  const color = getIntermediateColor(DEFAULT_COLORS, percentage);


  if (timeLeft !== lastTimeLeft) {
    const secondsElement = REST_WINDOW.querySelector('.seconds');
	console.log(secondsElement);
    secondsElement.style.color = color;
    secondsElement.innerHTML = `<span class="number">${timeLeft}</span>`;
    lastTimeLeft = timeLeft;

  }
      if(timeLeft==0){
			REST_WINDOW.classList.remove("active-rest-video");

	}


  const progressElement = REST_WINDOW.querySelector('.progress');
  const circleHtml = createCircle(color, percentage);
  const existingCircle = progressElement.querySelector('.circle');
  if (existingCircle) {
    existingCircle.outerHTML = circleHtml;
  } else {
    progressElement.insertAdjacentHTML('beforeend', circleHtml);
  }

  if (percentage < 100) {
    animationFrameId = requestAnimationFrame(() => updateTimer(REST_WINDOW));;
  }
}

function startTimer(REST_WINDOW) {
  if (animationFrameId) {
    cancelAnimationFrame(animationFrameId);
  }
  lastTimeLeft = null;
  startTime = Date.now();
  updateTimer(REST_WINDOW);
}


document.querySelectorAll('#timer').forEach((e)=>{
	e.innerHTML = `
	  <div class="wrapper">
	    <div class="progress">
	      <div class="seconds"></div>
	    </div>
		<div class="rest-btns">
			<button class="skip-rest" onclick="minus10()">-10</button>
	    	<button class="skip-rest" onclick="skipRest(this)">Skip</button>
	    	<button class="skip-rest" onclick="plus10()">+10</button>
		</div>
		
	  </div>
	`;

});


function minus10(){
	if(DURATION>=10){
		DURATION-=10;
	}
}
function plus10(){
	DURATION+=10;
}
function skipRest(but){
	let REST_WINDOW= but.closest(".wo-tab-content").querySelector('.rest-video');
	REST_WINDOW.classList.toggle("active-rest-video");
}

function completeWorkout(parent){
	if(parent == "mv-"){
		console.log("i'm hereeee")
		mv_currentExcerciseIndex = (mv_currentExcerciseIndex + 1) % mv_exercises.length;
		updateExerciseDisplay("mv-",mv_exercises);
	}	
	else{
		currentExerciseIndex = (currentExerciseIndex + 1) % exercises.length;
		updateExerciseDisplay("",exercises);
	}
	
	   updateExerciseDisplay(exercises);
	       	    CURR_VIDEO.pause();
	   CURR_VIDEO.currentTime = 0;
    	    CURR_VIDEO.pause();
    CURR_VIDEO.currentTime = 0; //
}

function startWorkout(but){
	console.log("crying");
	let CURR_VIDEO=but.closest(".wo-tab-content").querySelector("#exercise-video");
	CURR_VIDEO.autoplay=true;
	CURR_VIDEO.play();
}
// Add event listeners

// Start the timer initially










let wholeVideo={};

// Mock data - replace with your actual data
const fitnessCategories = [
  'Legs',
  'Triceps',
  'Biceps',
  'Chest',
  'Glutes',
  'Forearms',
  'Abs',
  "Calfs",
  'Shoulder',
  'Traps',
  'Quads',
  'Hamstring',
  'Lat'
];

// Mock videos - replace with your actual data fetching logic
const mockVideos = [];

// DOM Elements
const modal = document.getElementById('manual-videoModal');
const addVideoBtn = document.getElementById('manual-addVideoBtn');
const closeBtn = document.querySelector('.manual-close-button');
const categorySelect = document.getElementById('manual-categorySelect');
const videoList = document.getElementById('manual-videoList');
const cancelBtn = document.getElementById('manual-cancelBtn');
const doneBtn = document.getElementById('manual-doneBtn');
const MUSCLE_TRAINED=_(".Muscle-trained");
const SELECT_VIDEOS = document.getElementById("manual-categorySelect");

// State
let selectedVideos = [];

// Initialize category options
fitnessCategories.forEach(category => {
  const option = document.createElement('option');
  option.value = category;
  option.textContent = category;
  categorySelect.appendChild(option);
});

// Event Listeners
addVideoBtn.addEventListener('click', () => {
	console.log("ennda da dei");
  modal.classList.add('man-active');
  BODY.addEventListener("click",selectByBody)
  MUSCLE_TRAINED.innerText="Select A Category"

  
});

closeBtn.addEventListener('click', closeModal);
cancelBtn.addEventListener('click', closeModal);

// Close modal if clicking outside
modal.addEventListener('click', (e) => {
  if (e.target === modal) {
      closeModal();
  }
});
function renderVideoOption(){
	      mockVideos.forEach(video => {
          const videoItem = document.createElement('div');
          videoItem.className = 'manual-video-item';
          
          const checkbox = document.createElement('input');
          checkbox.type = 'checkbox';
          checkbox.checked = selectedVideos.includes(video);
          checkbox.addEventListener('change', () => toggleVideoSelection(video));
          
          const label = document.createElement('span');
          label.textContent = video;
          
          videoItem.appendChild(checkbox);
          videoItem.appendChild(label);
          videoList.appendChild(videoItem);
      });
}

function getVideos(tosearch){
	fetch(`/kunto/manual_workout?search=${tosearch}`)
	.then((res)=>{
		if(res.ok){
			return res.json()
		}
	})
	.then((data)=>{
		wholeVideo=data;
		mockVideos.length=0;
		Object.keys(data).forEach((key)=>{
			mockVideos.push(key);
		})
		renderVideoOption();
	})
}
categorySelect.addEventListener('change', (e) => {
  if (e.target.value) {
      // Clear previous videos
      videoList.innerHTML = '';
      getVideos(e.target.value);
      // Populate video list (using mock data - replace with your actual data fetching)

  } else {
      videoList.innerHTML = '';
  }
});

doneBtn.addEventListener('click', () => {
  mv_render();
  closeModal();
});

// Helper functions
function toggleVideoSelection(video) {
  if (selectedVideos.includes(video)) {
      selectedVideos = selectedVideos.filter(v => v !== video);
  } else {
      selectedVideos.push(video);
  }
  
  // Update done button state
  doneBtn.disabled = selectedVideos.length === 0;
}

function closeModal() {
  modal.classList.remove('man-active');
  BODY.removeEventListener("click",selectByBody)
  MUSCLE_TRAINED.innerText="Muscle Trained Today";
  categorySelect.value = '';
  videoList.innerHTML = '';
  doneBtn.disabled = true;
}




FRONT.querySelectorAll("g").forEach((element) => {
  element.addEventListener("mouseenter", () => {
      const id = element.id;
      
      if (id) {
          FRONT.querySelectorAll(`#${id}`).forEach((el) => {
              el.querySelectorAll("path").forEach((e)=>{
                e.style.color = "#fe6b8b";
              }) // Change to any color you prefer
          });
      }
  });

  element.addEventListener("mouseleave", () => {
      const id = element.id;
      if (id) {
        FRONT.querySelectorAll(`#${id}`).forEach((el) => {
            el.querySelectorAll("path").forEach((e)=>{
              e.style.color = "";
            }) // Change to any color you prefer
        });
    }
  });
});


BACK.querySelectorAll("g").forEach((element) => {
  element.addEventListener("mouseenter", () => {
      const id = element.id;
      
      if (id) {
          BACK.querySelectorAll(`#${id}`).forEach((el) => {
              el.querySelectorAll("path").forEach((e)=>{
                e.style.color = "#fe6b8b";
              }) // Change to any color you prefer
          });
      }
  });

  element.addEventListener("mouseleave", () => {
      const id = element.id;
      if (id) {
        BACK.querySelectorAll(`#${id}`).forEach((el) => {
            el.querySelectorAll("path").forEach((e)=>{
              e.style.color = "";
            }) // Change to any color you prefer
        });
    }
  });
});

function triggerVideoLists(name){
	SELECT_VIDEOS.value=name;
	SELECT_VIDEOS.dispatchEvent(new Event("change"));

}

function selectByBody(ev){
  console.log(ev.target.classList[0]);
  if(ev.target.classList[0]){
	triggerVideoLists(ev.target.classList[0])
  }
  
}